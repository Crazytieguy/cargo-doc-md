---
source: tests/snapshot_tests.rs
expression: lib_content
---
**test_crate**

# Module: test_crate

## Contents

**Modules**

- [`functions`](#functions)
- [`nested`](#nested)
- [`types`](#types)

**Structs**

- [`Error`](#error)
- [`GenericStruct`](#genericstruct)
- [`PlainStruct`](#plainstruct)
- [`TupleStruct`](#tuplestruct)
- [`UnitStruct`](#unitstruct)

**Enums**

- [`ComplexEnum`](#complexenum)
- [`GenericEnum`](#genericenum)
- [`SimpleEnum`](#simpleenum)

**Functions**

- [`function_with_args`](#function_with_args)
- [`function_with_result`](#function_with_result)
- [`generic_function`](#generic_function)
- [`simple_function`](#simple_function)

**Traits**

- [`MyTrait`](#mytrait)

**Constants**

- [`MAX_SIZE`](#max_size)

**Type Aliases**

- [`Result`](#result)

---

## test_crate::ComplexEnum

**Type:** Enum

**Variants:**

| Variant | Kind | Description |
|---------|------|-------------|
| `Unit` | Unit | - |
| `Tuple` | Tuple(String, i32) | - |
| `Struct` | Struct (2 fields) | - |



## test_crate::Error

**Type:** Struct

**Trait Implementations:**

- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result` - 



## test_crate::GenericEnum

**Type:** Enum

**Generic Parameters:**
- T

**Variants:**

| Variant | Kind | Description |
|---------|------|-------------|
| `Some` | Tuple(T) | - |
| `None` | Unit | - |



## test_crate::GenericStruct

**Type:** Struct

**Generic Parameters:**
- T
- U

**Fields:**

| Name | Type | Description |
|------|------|-------------|
| `first` | `T` | - |
| `second` | `U` | - |

**Methods:**

- `fn new(first: T, second: U) -> Self` - 
- `fn swap(self: Self) -> GenericStruct<U, T>` - 



## test_crate::MAX_SIZE

**Type:** Constant



## test_crate::MyTrait

**Type:** Trait

**Methods:**

- `required_method`
- `provided_method`



## test_crate::PlainStruct

**Type:** Struct

**Fields:**

| Name | Type | Description |
|------|------|-------------|
| `name` | `String` | - |
| `value` | `i32` | - |

**Methods:**

- `fn new(name: String, value: i32) -> Self` - 
- `fn get_value(self: &Self) -> i32` - 

**Trait Implementations:**

- **MyTrait**
  - `fn required_method(self: &Self) -> String` - 
- **Clone**
  - `fn clone(self: &Self) -> PlainStruct` - 
- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result` - 



## test_crate::Result

**Type:** Type Alias



## test_crate::SimpleEnum

**Type:** Enum

**Variants:**

| Variant | Kind | Description |
|---------|------|-------------|
| `VariantA` | Unit | - |
| `VariantB` | Unit | - |
| `VariantC` | Unit | - |

**Implemented Traits:** Eq, StructuralPartialEq

**Trait Implementations:**

- **PartialEq**
  - `fn eq(self: &Self, other: &SimpleEnum) -> bool` - 
- **Clone**
  - `fn clone(self: &Self) -> SimpleEnum` - 
- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result` - 



## test_crate::TupleStruct

**Type:** Struct

**Tuple Struct** with 2 field(s)



## test_crate::UnitStruct

**Type:** Struct

**Unit Struct**



## test_crate::function_with_args

**Type:** Function

```rust
fn function_with_args(name: &str, value: i32) -> String
```



## test_crate::function_with_result

**Type:** Function

```rust
fn function_with_result(value: i32) -> Result<String>
```



## Module: functions



## test_crate::generic_function

**Type:** Function

```rust
fn generic_function<T>(item: T) -> String
```



## Module: nested



## test_crate::simple_function

**Type:** Function

```rust
fn simple_function()
```



## Module: types
