---
source: tests/snapshot_tests.rs
expression: lib_content
---
**test_crate**

# Module: test_crate

## Contents

**Modules**

- [`async_example`](#async_example)
- [`errors`](#errors)
- [`functions`](#functions) - Function examples demonstrating various signatures and patterns.
- [`lifetimes`](#lifetimes)
- [`nested`](#nested) - Demonstrates nested module hierarchies.
- [`patterns`](#patterns)
- [`traits`](#traits)
- [`types`](#types) - Type definitions and containers.

**Structs**

- [`BoundedGeneric`](#boundedgeneric)
- [`Error`](#error)
- [`GenericStruct`](#genericstruct)
- [`PlainStruct`](#plainstruct)
- [`TupleStruct`](#tuplestruct)
- [`UnitStruct`](#unitstruct)

**Enums**

- [`ComplexEnum`](#complexenum)
- [`GenericEnum`](#genericenum)
- [`SimpleEnum`](#simpleenum)

**Functions**

- [`const_function`](#const_function)
- [`function_with_args`](#function_with_args)
- [`function_with_result`](#function_with_result)
- [`generic_function`](#generic_function)
- [`multiple_bounds`](#multiple_bounds)
- [`simple_function`](#simple_function)
- [`unsafe_function`](#unsafe_function) - An unsafe function that dereferences a raw pointer.

**Traits**

- [`DisplayDebug`](#displaydebug)
- [`MyTrait`](#mytrait)

**Constants**

- [`MAX_SIZE`](#max_size)
- [`MIN_SIZE`](#min_size)
- [`VERSION`](#version)

**Type Aliases**

- [`GenericResult`](#genericresult)
- [`Result`](#result)

---

## test_crate::BoundedGeneric

*Struct*

**Generic Parameters:**
- T

**Fields:**
- `data: T`

**Methods:**

- `fn new(data: T) -> Self`
- `fn clone_data(self: &Self) -> T`



## test_crate::ComplexEnum

*Enum*

**Variants:**
- `Unit`
- `Tuple(String, i32)`
- `Struct{ name: String, age: u32 }`

**Methods:**

- `fn name(self: &Self) -> Option<&str>`



## test_crate::DisplayDebug

*Trait*

**Methods:**

- `format_both`



## test_crate::Error

*Struct*

**Methods:**

- `fn new<impl Into<String>>(message: impl Trait) -> Self`
- `fn message(self: &Self) -> &str`

**Traits:** Error

**Trait Implementations:**

- **Display**
  - `fn fmt(self: &Self, f: & mut fmt::Formatter) -> fmt::Result`
- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result`



## test_crate::GenericEnum

*Enum*

**Generic Parameters:**
- T
- E

**Variants:**
- `Ok(T)`
- `Err(E)`
- `None`

**Methods:**

- `fn is_ok(self: &Self) -> bool`
- `fn is_err(self: &Self) -> bool`
- `fn ok(self: Self) -> Option<T>`

**Trait Implementations:**

- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result`
- **Clone**
  - `fn clone(self: &Self) -> GenericEnum<T, E>`



## test_crate::GenericResult

*Type Alias*: `std::result::Result<T, E>`



## test_crate::GenericStruct

*Struct*

**Generic Parameters:**
- T
- U

**Fields:**
- `first: T`
- `second: U`

**Methods:**

- `fn new(first: T, second: U) -> Self`
- `fn swap(self: Self) -> GenericStruct<U, T>`
- `fn map_first<F, R>(self: Self, f: F) -> GenericStruct<R, U>`
- `fn duplicate(self: &Self) -> (T, U)`

**Trait Implementations:**

- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result`
- **Clone**
  - `fn clone(self: &Self) -> GenericStruct<T, U>`



## test_crate::MAX_SIZE

*Constant*



## test_crate::MIN_SIZE

*Constant*



## test_crate::MyTrait

*Trait*

**Methods:**

- `required_method`
- `provided_method`
- `another_provided`



## test_crate::PlainStruct

*Struct*

**Fields:**
- `name: String`
- `value: i32`

**Methods:**

- `fn new(name: String, value: i32) -> Self`
- `fn with_private(name: String, value: i32, private_field: bool) -> Self`
- `fn get_value(self: &Self) -> i32`
- `fn set_value(self: & mut Self, value: i32)`

**Traits:** Eq

**Trait Implementations:**

- **Clone**
  - `fn clone(self: &Self) -> PlainStruct`
- **PartialEq**
  - `fn eq(self: &Self, other: &PlainStruct) -> bool`
- **Default**
  - `fn default() -> Self`
- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result`
- **MyTrait**
  - `fn required_method(self: &Self) -> String`
  - `fn provided_method(self: &Self) -> i32`



## test_crate::Result

*Type Alias*: `std::result::Result<T, Error>`



## test_crate::SimpleEnum

*Enum*

**Variants:**
- `VariantA`
- `VariantB`
- `VariantC`

**Methods:**

- `fn default_variant() -> Self`
- `fn is_variant_a(self: &Self) -> bool`

**Traits:** Eq

**Trait Implementations:**

- **PartialEq**
  - `fn eq(self: &Self, other: &SimpleEnum) -> bool`
- **Debug**
  - `fn fmt(self: &Self, f: & mut $crate::fmt::Formatter) -> $crate::fmt::Result`
- **Clone**
  - `fn clone(self: &Self) -> SimpleEnum`



## test_crate::TupleStruct

*Struct*

**Tuple Struct**: `(String, i32)`



## test_crate::UnitStruct

*Struct*

**Unit Struct**



## test_crate::VERSION

*Constant*



## Module: async_example



## test_crate::const_function

*Function*

```rust
fn const_function(x: i32) -> i32
```



## Module: errors



## test_crate::function_with_args

*Function*

```rust
fn function_with_args(name: &str, value: i32) -> String
```



## test_crate::function_with_result

*Function*

```rust
fn function_with_result(value: i32) -> Result<String>
```



## Module: functions

Function examples demonstrating various signatures and patterns.

This module shows:
- Simple functions
- Generic functions with trait bounds
- Async functions
- Unsafe functions
- Const functions
- Higher-order functions



## test_crate::generic_function

*Function*

```rust
fn generic_function<T>(item: T) -> String
```



## Module: lifetimes



## test_crate::multiple_bounds

*Function*

```rust
fn multiple_bounds<T>(item: T) -> String
```



## Module: nested

Demonstrates nested module hierarchies.

This shows how documentation is structured for deeply nested modules.



## Module: patterns



## test_crate::simple_function

*Function*

```rust
fn simple_function()
```



## Module: traits



## Module: types

Type definitions and containers.

This module demonstrates various type definitions including:
- Generic containers
- Enums with multiple variants
- Type aliases
- Structs with lifetime parameters



## test_crate::unsafe_function

*Function*

An unsafe function that dereferences a raw pointer.

# Safety

The caller must ensure that `ptr` is valid, properly aligned,
and points to initialized memory.

```rust
fn unsafe_function(ptr: *const u8) -> u8
```
